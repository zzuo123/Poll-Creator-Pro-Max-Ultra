
Application Idea

Please provide us with a thoughtful 600-word essay of the description of your project.

    What did you design and implement?
    Why did you choose the domain you did?
    Why is your application interesting and why would someone use it?
    Why would your application need to scale?



My project is called Poll Creator Pro Max Ultra. It allows users to create polls and have other users vote on the different options in the polls. It's the one-stop shop for all the poll creation and storing needs. The application has a home page that introduces the main functionality of the application, as well as a button to create a new poll. On the nav bar, there are four links. Home, which brings the user to the application homepage. All Polls, which brings the user to a page with all the polls created on this website, where they can subsequently view and vote on them, as well as delete the poll. There is also Top Polls, which is a dropdown containing links to the polls with the most votes (most popular ones). Then there is Create Poll, which activates a Bootstrap modal that allows users to create a new poll. Lastly, there is a search bar that allows users to search for a poll using keywords.

I chose this domain because I wanted to create a simple web application that would be useful to people. Currently, there are similar websites that allow users to create polls, but they are either too simple and ugly or overly complicated. My application is simple and well-designed but still has all the core functionalities required.

My application is interesting because it allows users to create polls and vote on them. Currently, I didn't cap the maximum number of times that people can vote on an option in a poll, because there isn't any way to know if two different votes came from the same person (without implementing user authentication). However, this makes the application interesting because they can create "fake polls" where they vote on one option many times as a joke.Â 

This application would need to scale because it needs to hold all the polls created by users, it also needs to serve multiple users at the same time (either creating polls or voting). I have engineered the backend services so that the polls and the votes/options are stored separately. This is because while the poll itself won't be changed much after creation, the votes/options need to be updated very often. If we store them together, then we would have to update the entire poll every time someone votes, which would be inefficient. By storing them separately, we can update the votes and options without having to involve the poll itself. Therefore, the polls service mainly serves the poll creation and deletion, while the votes service creates the vote option and updates the vote counts. They communicate over event-bus since a poll deletion would trigger the vote service to also delete the associated votes and options. The votes service also updates the poll service on the vote counts of the polls, where it stores the update in a buffer and checks for updates of the buffer every second using setInterval, and sends the update to the poll service if there is any. This is to prevent the poll service from being overwhelmed by the number of updates. Then there is also the search service, which connects to the poll collection and has an endpoint for searching for polls that contain user-specified keywords, and an endpoint for getting the top polls by vote count. These are the computational intensive services, so I separated them from the poll service. Lastly, there is the query service, which is the service that the frontend/client talks to. It has endpoints specifically designed to get the information that the front end needs from the other services and combine them into a format that can be used directly by the front end. This is to prevent the front end from having to talk to multiple services to get the information it needs, which would be inefficient. All these services work together to make the application efficient and scalable.